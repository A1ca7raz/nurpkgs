name: "Update packages"

on:
  push:
    paths:
      - '.github/workflows/update.yml'
  repository_dispatch:
    types:
      - bump
  workflow_dispatch:
    inputs:
      update_lock:
        description: Update flake.lock
        required: true
        default: true
        type: boolean
      update_source:
        description: Update source
        required: true
        default: true
        type: boolean
      skip_check:
        description: Skip evaluation
        required: true
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      packages: ${{ steps.pkgs.outputs.packages }}

    steps:
    - name: 0-1. Checkout repository
      uses: actions/checkout@v4

    - name: 0-2. Install Nix
      uses: nixbuild/nix-quick-install-action@v32

    - name: 1-1. Update flake.lock
      if: ${{ inputs.update_lock == true || github.event_name == 'repository_dispatch' }}
      run: nix flake update

    - name: 1-2. Update package sources
      if: ${{ inputs.update_source == true || github.event_name == 'repository_dispatch' }}
      run: nix run .#update

    - name: 2-1. Show flake metadata
      id: pkgs
      if: ${{ always() }}
      run: |
        nix flake metadata
        echo "packages=`nix eval --json .#packages.x86_64-linux --apply 'builtins.attrNames'`" >> $GITHUB_OUTPUT
        echo "packages_raw=\"`nix eval --raw .#packages.x86_64-linux --apply 'x: with builtins; concatStringsSep " " (attrNames x)'`\"" >> $GITHUB_OUTPUT

    - name: 2-2. Show flake information
      if: ${{ always() }}
      run: nix flake show

    - name: 2-3. Check evaluation
      if: ${{ inputs.skip_check == false || github.event_name == 'repository_dispatch' }}
      run: nix flake check --no-build --no-allow-import-from-derivation

    - name: 3-1. Bump flake.lock ONLY
      if: ${{ inputs.update_lock == true && inputs.update_source == false }}
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: "Update: flake.lock"
        file_pattern: "flake.lock"

    - name: 3-2. Bump sources ONLY
      if: ${{ inputs.update_source == true && inputs.update_lock == false }}
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: "Update: source"
        file_pattern: "pkgs/_sources"

    - name: 3-3. Bump flake.lock and sources
      if: ${{ inputs.update_source == true && inputs.update_lock == true || github.event_name == 'repository_dispatch' }}
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: "Update: flake.lock&sources"
        file_pattern: "flake.lock pkgs/_sources"

  build:
    needs: update
    secrets: inherit
    permissions:
      contents: write
      actions: write
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.update.outputs.packages) }}
    uses: ./.github/workflows/build.yml
    with:
      package: ${{ matrix.package }}

  post_build:
    needs: build
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
    - name: 1-1. Send notification
      env:
        RECEIVER_ID: ${{ secrets.TG_RECEIVER_ID }}
        BOT_KEY: ${{ secrets.TG_BOT_KEY }}
        MESSAGE: "ðŸŸ¢ [nurpkgs](https://github.com/A1ca7raz/nurpkgs) has been updated."
      run: |
        pip install apprise
        apprise -vv -b "$MESSAGE" "tgram://$BOT_KEY/$RECEIVER_ID/?format=markdown" || true # Force complete task
